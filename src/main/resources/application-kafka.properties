# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.
spring.kafka.bootstrap-servers=192.168.131.130:9092
## Id to pass to the server when making requests; used for server-side logging.
#spring.kafka.client-id=


## Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.
#spring.kafka.consumer.bootstrap-servers=
# Unique string that identifies the consumer group this consumer belongs to.
spring.kafka.consumer.group-id=consumer-group-ec
# Deserializer class for keys.
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Deserializer class for values.
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
## If true the consumer's offset will be periodically committed in the background.
#spring.kafka.consumer.enable-auto-commit= 
## Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.
#spring.kafka.consumer.auto-commit-interval=
## What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.
#spring.kafka.consumer.auto-offset-reset=
## Id to pass to the server when making requests; used for server-side logging.
#spring.kafka.consumer.client-id=
## Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch.min.bytes".
#spring.kafka.consumer.fetch-max-wait=
## Minimum amount of data the server should return for a fetch request in bytes.
#spring.kafka.consumer.fetch-min-size=
## Expected time in milliseconds between heartbeats to the consumer coordinator.
#spring.kafka.consumer.heartbeat-interval=
## Maximum number of records returned in a single call to poll().
#spring.kafka.consumer.max-poll-records=


## Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".
#spring.kafka.listener.ack-count=
## Listener AckMode; see the spring-kafka documentation.
#spring.kafka.listener.ack-mode=
## Time in milliseconds between offset commits when ackMode is "TIME" or "COUNT_TIME".
#spring.kafka.listener.ack-time=
# Number of threads to run in the listener containers.
spring.kafka.listener.concurrency=4
# Timeout in milliseconds to use when polling the consumer.
spring.kafka.listener.poll-timeout=3000


## Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.
#spring.kafka.producer.bootstrap-servers=
## Id to pass to the server when making requests; used for server-side logging.
#spring.kafka.producer.client-id=
# Serializer class for keys.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Serializer class for values.
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
## Number of acknowledgments the producer requires the leader to have received before considering a request complete.
#spring.kafka.producer.acks=
## Number of records to batch before sending.
#spring.kafka.producer.batch-size=
## Total bytes of memory the producer can use to buffer records waiting to be sent to the server.
#spring.kafka.producer.buffer-memory=
## Compression type for all data generated by the producer.
#spring.kafka.producer.compression-type=
## When greater than zero, enables retrying of failed sends.
#spring.kafka.producer.retries=
## Default topic to which messages will be sent.
#spring.kafka.template.default-topic=


## Additional properties used to configure the client.
#spring.kafka.properties.*=
## Password of the private key in the key store file.
#spring.kafka.ssl.key-password=
## Location of the key store file.
#spring.kafka.ssl.keystore-location=
## Store password for the key store file.
#spring.kafka.ssl.keystore-password=
## Location of the trust store file.
#spring.kafka.ssl.truststore-location=
## Store password for the trust store file.
#spring.kafka.ssl.truststore-password=


#spring.kafka.properties.security.protocol=SASL_PLAINTEXT
#java.security.krb5.conf=/home/imcd/kafkatest/krb5.conf
#java.security.auth.login.config=/home/imcd/kafkatest/kafka_jaas.conf